#!/usr/bin/env python3

from __future__ import print_function
import sys
import os
import subprocess

# -------------------------------------------------
#   Prepare datas
# -------------------------------------------------
base_scale = 128
# mode name -> width
base_modes = [
  ("QI", 8), ("HI", 16), ("SI", 32), ("DI", 64),
  ("HF", 16), ("SF", 32), ("DF", 64)
]
base_int_modes = {
  8: "QI",
  16: "HI",
  32: "SI",
  64: "DI",
  128: "TI",
}

base_fp_modes = {
  16: "HF",
  32: "SF",
  64: "DF",
}

SEWS = [8, 16, 32, 64]

SEW_LETTERS = {
   8 : 'b',
  16 : 'h',
  32 : 'w',
  64 : 'd',
 128 : 't',
}

class VectorTypeInfo:
  def __init__(self, sew, lmul, int_p):
    self.sew = sew
    self.sew_letter = SEW_LETTERS[sew]
    self.lmul = lmul
    self.int_p = int_p

    if int_p:
      self.scalar_mode = base_int_modes[sew]
      self.scalar_ctype = "int%d_t" % sew
    else:
      self.scalar_mode = base_fp_modes[sew]
      self.scalar_ctype = "__float%d_t" % sew

    self.scalar_int_mode = base_int_modes[sew]
    self.scalar_int_ctype = "int%d_t" % sew

    self.scale = (base_scale // sew) * lmul
    self.mask_mode = "VNx%sBI" % (self.scale)
    self._base_vector_mode = "VNx%s%s" % (self.scale, mode)

    self.mode = "VNx%s%s" % (self.scale, self.scalar_mode)

    self.int_vector_mode = self.mode[:-1] + 'I'
    self.float_vector_mode = self.mode[:-1] + 'F'
    self.mlen = self.sew // self.lmul
    self.mask_ctype = "vbool%d_t" % self.mlen

    self.arg_map = {
      'SEW'    : self.sew,
      'SEW_LETTER':self.sew_letter,
      'LMUL'   : self.lmul,
      'MODE'   : self.mode.lower(),
      'IMODE': self.int_vector_mode.lower(),
      'MODE_TYPE'   : self.mode,
      'IMODE_TYPE': self.int_vector_mode,
      'SUBMODE'  : self.scalar_mode,
      'ISUBMODE' : self.scalar_int_mode,
      'C_SCALAR_TYPE'  : self.scalar_ctype,
      'C_MASK_TYPE'  : self.mask_ctype,
      'C_SCALAR_ITYPE' : self.scalar_int_ctype,
      'MLEN'   : self.mlen,
      'SUBMODE_PREFIX_UPPER': self.scalar_mode[0].upper(),
      'SUBMODE_PREFIX_LOWER': self.scalar_mode[0].lower(),
      'MODE_PREFIX_UPPER' : self.mode[:-1],
      'MODE_PREFIX_LOWER' : self.mode[:-1].lower(),
    }

  def __getitem__(self, item):
    return self.arg_map[item]

LMULs = [1, 2, 4, 8]
NF = range(2, 9) # 2~8
# Construct all vector and vector tuple modes.
vector_modes = []
for mode, width in base_modes:
  for lmul in LMULs:
    vt = VectorTypeInfo(sew=width, lmul=lmul, int_p=mode.endswith("I"))
    vector_modes.append(vt)

int_vector_modes = list(filter(lambda x : x.int_p, vector_modes))
float_vector_modes = list(filter(lambda x : not x.int_p, vector_modes))

vector_masking_modes = []
for n in range(7):
  scale = 2 << n
  mode_name = "VNx%sBI" % scale
  vector_masking_modes.append(mode_name)

def _dump_c_iterator(name, comment, arg_list_template, vals, extra_arg_p=True):
  if (extra_arg_p):
    print ("#define %s_ARG(MACRO, ...) \\" % name)
  else:
    print ("#define %s(MACRO) \\" % name)
  for val in vals:
    print ("  MACRO (", end='')
    print (arg_list_template.format_map(val), end='')
    if extra_arg_p:
      print (", __VA_ARGS__", end='')
    print (") \\")
  print ("")


def dump_c_iterator(name, comment, arg_list_template, vals,
                    gen_arg_version_p=True):
  print (comment)
  _dump_c_iterator(name, comment, arg_list_template, vals, False)
  if gen_arg_version_p:
    print ("/* Same as above but with an extra argument.  */")
    _dump_c_iterator(name, comment, arg_list_template, vals, True)

# -------------------------------------------------
#  Generation for riscv-vector-iterator.h
# -------------------------------------------------
def gen_c():
  global int_vector_modes, float_vector_modes
  print ("/* DO NOT EDIT, please edit generator instead.")
  print ("   This file was generated by gen-vector-iterator with the command:")
  print ("   $ ./gen-vector-iterator -c > riscv-vector-iterator.h  */")
  dump_c_iterator(
    name = "_RVV_INT_TYPE_ITERATOR",
    comment = "/* An iterator to call a macro with every supported SEW and LMUL,\n"
              "   along with its corresponding vector and scalar modes in GCC.  */",
    arg_list_template = "{SEW}, {LMUL}, {MODE_TYPE}, {SUBMODE}",
    vals = int_vector_modes
  )

  dump_c_iterator(
    name = "_RVV_FLOAT_TYPE_ITERATOR",
    comment = "/* An iterator to call a macro with every supported SEW and LMUL,\n"
              "   along with its corresponding vector and scalar modes in GCC.  */",
    arg_list_template = "{SEW}, {LMUL}, {MODE_TYPE}, {SUBMODE}",
    vals = float_vector_modes
  )

# -------------------------------------------------
#  Generation for riscv-vector-iterator.h in testsuite.
# -------------------------------------------------
def gen_testsuite_header():
  global int_vector_modes, float_vector_modes
  print ("/* DO NOT EDIT, please edit generator instead.")
  print ("   This file was generated by gen-vector-iterator with the command:")
  print ("   $ ./gen-vector-iterator -testsuite-hdr ../../testsuite/gcc.target/riscv/rvv/riscv-vector-iterator.h  */")
  dump_c_iterator(
    name = "_RVV_INT_TYPE_ITERATOR",
    comment = "/* An iterator to call a macro with every supported SEW and LMUL,\n"
              "   along with its corresponding MLEN, mask and scalar type.  */",
    arg_list_template = "{SEW}, {LMUL}, {MLEN}, {C_MASK_TYPE}, {C_SCALAR_TYPE}",
    vals = int_vector_modes
  )

  dump_c_iterator(
    name = "_RVV_FLOAT_TYPE_ITERATOR",
    comment = "/* An iterator to call a macro with every supported SEW and LMUL,\n"
              "   along with its corresponding MLEN, mask and scalar type.  */",
    arg_list_template = "{SEW}, {LMUL}, {MLEN}, {C_MASK_TYPE}, {C_SCALAR_TYPE}",
    vals = float_vector_modes
  )

def gen(mode, filename):
  this_script = os.path.abspath(__file__)
  cwd = os.path.dirname(this_script)
  py = sys.executable
  output_path = os.path.join(cwd, filename)
  subprocess.call([py, this_script, mode],
                   stdout=open(output_path, 'w'),
                  cwd=cwd)

if __name__ == '__main__':
  if sys.argv[1] == '-c':
    gen_c()
  elif sys.argv[1] == '-testsuite-hdr':
    gen_testsuite_header()
  elif sys.argv[1] == '-all':
    gen('-c', 'riscv-vector-iterator.h')
    gen('-testsuite-hdr', '../../testsuite/gcc.target/riscv/rvv/riscv-vector-iterator.h')
  else:
    print ("Usage: %s -c" % sys.argv[0])
    sys.exit(1)
